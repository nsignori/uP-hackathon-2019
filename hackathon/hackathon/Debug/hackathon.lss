
hackathon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000003c8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000006b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000636f  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004098  00000000  00000000  00006b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c2b  00000000  00000000  0000abdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  0000b80c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004d1e  00000000  00000000  0000b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d8  00000000  00000000  000106c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0001089e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e8 ec       	ldi	r30, 0xC8	; 200
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
 234:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 23c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

00000244 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000258 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 25e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 264:	8f 91       	pop	r24

 266:	08 95       	ret

00000268 <dac_init>:
#include "dac.h"

void dac_init(void) {
	DACA.CTRLA = DAC_CH1EN_bm;
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	f3 e0       	ldi	r31, 0x03	; 3
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	80 83       	st	Z, r24
	
	DACA.CTRLB = DAC_CHSEL_SINGLE1_gc | DAC_CH1TRIG_bm;
 270:	82 e2       	ldi	r24, 0x22	; 34
 272:	81 83       	std	Z+1, r24	; 0x01
	
	DACA.CTRLC = ADC_REFSEL_INT1V_gc;
 274:	12 82       	std	Z+2, r1	; 0x02
	
	DACA.CTRLA |= DAC_ENABLE_bm;
 276:	80 81       	ld	r24, Z
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <dma_init>:
 *  Author: sharoncomora
 */ 
#include "dma.h"
//#include "lut_8_1.h"

void dma_init(uint16_t * LUT, uint16_t dest_addr) {
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
	
	DMA.CTRL |= DMA_RESET_bm;
 282:	e0 e0       	ldi	r30, 0x00	; 0
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	20 81       	ld	r18, Z
 288:	20 64       	ori	r18, 0x40	; 64
 28a:	20 83       	st	Z, r18
	
	/*	repeat off - doesn't work
		repeat on -
	*/
	DMA.CH0.CTRLA =	DMA_CH_SINGLE_bm | 
 28c:	25 e2       	ldi	r18, 0x25	; 37
 28e:	20 8b       	std	Z+16, r18	; 0x10
					DMA_CH_BURSTLEN_2BYTE_gc |
					DMA_CH_REPEAT_bm;

	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;
 290:	20 e1       	ldi	r18, 0x10	; 16
 292:	23 8b       	std	Z+19, r18	; 0x13
	//uint8_t LUT_size = (uint8_t) (512);
	DMA.CH0.TRFCNT = 2;
 294:	22 e0       	ldi	r18, 0x02	; 2
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	24 8b       	std	Z+20, r18	; 0x14
 29a:	35 8b       	std	Z+21, r19	; 0x15
	DMA.CH0.SRCADDR0 = byte0(LUT);
 29c:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = byte1(LUT);
 29e:	09 2e       	mov	r0, r25
 2a0:	00 0c       	add	r0, r0
 2a2:	aa 0b       	sbc	r26, r26
 2a4:	bb 0b       	sbc	r27, r27
 2a6:	09 2f       	mov	r16, r25
 2a8:	1a 2f       	mov	r17, r26
 2aa:	2b 2f       	mov	r18, r27
 2ac:	33 27       	eor	r19, r19
 2ae:	01 8f       	std	Z+25, r16	; 0x19
	DMA.CH0.SRCADDR2 = byte2(LUT);
 2b0:	cd 01       	movw	r24, r26
 2b2:	aa 27       	eor	r26, r26
 2b4:	bb 27       	eor	r27, r27
 2b6:	82 8f       	std	Z+26, r24	; 0x1a
	
	DMA.CH0.DESTADDR0 = byte0(dest_addr);
 2b8:	64 8f       	std	Z+28, r22	; 0x1c
	DMA.CH0.DESTADDR1 = byte1(dest_addr);
 2ba:	75 8f       	std	Z+29, r23	; 0x1d
	DMA.CH0.DESTADDR2 = byte2(dest_addr);
 2bc:	16 8e       	std	Z+30, r1	; 0x1e
	
	while(DMA.CH0.CTRLB & DMA_CH_CHBUSY_bm);
 2be:	81 89       	ldd	r24, Z+17	; 0x11
 2c0:	88 23       	and	r24, r24
 2c2:	ec f3       	brlt	.-6      	; 0x2be <dma_init+0x40>
	
	DMA.CH0.REPCNT = 0;
 2c4:	e0 e0       	ldi	r30, 0x00	; 0
 2c6:	f1 e0       	ldi	r31, 0x01	; 1
 2c8:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.ADDRCTRL =	DMA_CH_SRCRELOAD_BURST_gc | 
 2ca:	80 e9       	ldi	r24, 0x90	; 144
 2cc:	82 8b       	std	Z+18, r24	; 0x12
						DMA_CH_DESTDIR_FIXED_gc;
	//DMA.CH0.CTRLA |= DMA_CH_REPEAT_bm;
	
	//DMA.CH0.CTRLB |= DMA_CH_TRNINTLVL_LO_gc;
	//DMA.CH0.CTRLB = DMA_CH_TRNINTLVL_LO_gc;
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 2ce:	80 89       	ldd	r24, Z+16	; 0x10
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CTRL |= DMA_ENABLE_bm;
 2d4:	80 81       	ld	r24, Z
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	80 83       	st	Z, r24
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <sys_interr_init>:
	PORTD.OUTSET = PIN4_bm | PIN6_bm;
	PORTD.DIRSET = PIN4_bm | PIN6_bm;
}

void sys_interr_init(void) {
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 2e6:	78 94       	sei
 2e8:	08 95       	ret

000002ea <main>:
void init_gpio(void);
void sys_interr_init(void);

int main(void)
{
	clock_init();
 2ea:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>
	//baud=0; bsel=0 => baud = 2MHz
	USARTE0_init(0,0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 9b 01 	call	0x336	; 0x336 <USARTE0_init>
	dac_init();
 2f8:	0e 94 34 01 	call	0x268	; 0x268 <dac_init>
	dma_init(sin, &DACA_CH1DATA);
 2fc:	6a e1       	ldi	r22, 0x1A	; 26
 2fe:	73 e0       	ldi	r23, 0x03	; 3
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e2       	ldi	r25, 0x20	; 32
 304:	0e 94 3f 01 	call	0x27e	; 0x27e <dma_init>
	//enable usart for low-level receive interrupts
	USARTE0_enable_interrupts('R', 'L');
 308:	6c e4       	ldi	r22, 0x4C	; 76
 30a:	82 e5       	ldi	r24, 0x52	; 82
 30c:	0e 94 aa 01 	call	0x354	; 0x354 <USARTE0_enable_interrupts>
	//enable frequency timer (DMA)
	tcc0_init();
 310:	0e 94 8d 01 	call	0x31a	; 0x31a <tcc0_init>
	sys_interr_init();
 314:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sys_interr_init>
 318:	ff cf       	rjmp	.-2      	; 0x318 <main+0x2e>

0000031a <tcc0_init>:
	uint32_t numer = 32000000;
	uint32_t freq = 1760;
	uint32_t denom = freq * 256;
	uint16_t per = numer / denom;
	
	TCC0.PER = per;
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	f8 e0       	ldi	r31, 0x08	; 8
 31e:	87 e4       	ldi	r24, 0x47	; 71
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	86 a3       	std	Z+38, r24	; 0x26
 324:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.INTCTRLA = TC0_OVFINTLVL0_bm;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	86 83       	std	Z+6, r24	; 0x06
	
	/* set evsys ch0 */
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 32a:	80 ec       	ldi	r24, 0xC0	; 192
 32c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
	
	TCC0.CNT = 0;
 330:	10 a2       	std	Z+32, r1	; 0x20
 332:	11 a2       	std	Z+33, r1	; 0x21
 334:	08 95       	ret

00000336 <USARTE0_init>:
}

char USARTE0_in_char(void) {
	while(!(USARTE0.STATUS & USART_RXCIF_bm));
	return USARTE0.DATA;
}
 336:	24 e0       	ldi	r18, 0x04	; 4
 338:	20 93 82 06 	sts	0x0682, r18	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
 33c:	e0 ea       	ldi	r30, 0xA0	; 160
 33e:	fa e0       	ldi	r31, 0x0A	; 10
 340:	86 83       	std	Z+6, r24	; 0x06
 342:	62 95       	swap	r22
 344:	60 7f       	andi	r22, 0xF0	; 240
 346:	96 2b       	or	r25, r22
 348:	97 83       	std	Z+7, r25	; 0x07
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	85 83       	std	Z+5, r24	; 0x05
 34e:	88 e1       	ldi	r24, 0x18	; 24
 350:	84 83       	std	Z+4, r24	; 0x04
 352:	08 95       	ret

00000354 <USARTE0_enable_interrupts>:
}
*/

void USARTE0_enable_interrupts(char intType, char intLevel) {
	//receive
	if (intType == 'r' || intType == 'R') {
 354:	98 2f       	mov	r25, r24
 356:	9f 7d       	andi	r25, 0xDF	; 223
 358:	92 35       	cpi	r25, 0x52	; 82
 35a:	c9 f4       	brne	.+50     	; 0x38e <USARTE0_enable_interrupts+0x3a>
		if (intLevel == 'l' || intLevel == 'L') {
 35c:	6f 7d       	andi	r22, 0xDF	; 223
 35e:	6c 34       	cpi	r22, 0x4C	; 76
 360:	31 f4       	brne	.+12     	; 0x36e <USARTE0_enable_interrupts+0x1a>
			USARTE0.CTRLA |= USART_RXCINTLVL_LO_gc;
 362:	e0 ea       	ldi	r30, 0xA0	; 160
 364:	fa e0       	ldi	r31, 0x0A	; 10
 366:	83 81       	ldd	r24, Z+3	; 0x03
 368:	80 61       	ori	r24, 0x10	; 16
 36a:	83 83       	std	Z+3, r24	; 0x03
 36c:	08 95       	ret
		}
		else if (intLevel == 'm' || intLevel == 'M') {
 36e:	6d 34       	cpi	r22, 0x4D	; 77
 370:	31 f4       	brne	.+12     	; 0x37e <USARTE0_enable_interrupts+0x2a>
			USARTE0.CTRLA |= USART_RXCINTLVL_MED_gc;
 372:	e0 ea       	ldi	r30, 0xA0	; 160
 374:	fa e0       	ldi	r31, 0x0A	; 10
 376:	83 81       	ldd	r24, Z+3	; 0x03
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	83 83       	std	Z+3, r24	; 0x03
 37c:	08 95       	ret
		}
		else if (intLevel == 'h' || intLevel == 'H') {
 37e:	68 34       	cpi	r22, 0x48	; 72
 380:	01 f5       	brne	.+64     	; 0x3c2 <USARTE0_enable_interrupts+0x6e>
			USARTE0.CTRLA |= USART_RXCINTLVL_HI_gc;
 382:	e0 ea       	ldi	r30, 0xA0	; 160
 384:	fa e0       	ldi	r31, 0x0A	; 10
 386:	83 81       	ldd	r24, Z+3	; 0x03
 388:	80 63       	ori	r24, 0x30	; 48
 38a:	83 83       	std	Z+3, r24	; 0x03
 38c:	08 95       	ret
		}
	}
	else if (intType == 't' || intType == 't') {
 38e:	84 37       	cpi	r24, 0x74	; 116
 390:	c1 f4       	brne	.+48     	; 0x3c2 <USARTE0_enable_interrupts+0x6e>
		if (intLevel == 'l' || intLevel == 'L') {
 392:	6f 7d       	andi	r22, 0xDF	; 223
 394:	6c 34       	cpi	r22, 0x4C	; 76
 396:	31 f4       	brne	.+12     	; 0x3a4 <USARTE0_enable_interrupts+0x50>
			USARTE0.CTRLA |= USART_DREINTLVL_LO_gc;
 398:	e0 ea       	ldi	r30, 0xA0	; 160
 39a:	fa e0       	ldi	r31, 0x0A	; 10
 39c:	83 81       	ldd	r24, Z+3	; 0x03
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	83 83       	std	Z+3, r24	; 0x03
 3a2:	08 95       	ret
		}
		else if (intLevel == 'm' || intLevel == 'M') {
 3a4:	6d 34       	cpi	r22, 0x4D	; 77
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <USARTE0_enable_interrupts+0x60>
			USARTE0.CTRLA |= USART_DREINTLVL_MED_gc;
 3a8:	e0 ea       	ldi	r30, 0xA0	; 160
 3aa:	fa e0       	ldi	r31, 0x0A	; 10
 3ac:	83 81       	ldd	r24, Z+3	; 0x03
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	83 83       	std	Z+3, r24	; 0x03
 3b2:	08 95       	ret
		}
		else if (intLevel == 'h' || intLevel == 'H') {
 3b4:	68 34       	cpi	r22, 0x48	; 72
 3b6:	29 f4       	brne	.+10     	; 0x3c2 <USARTE0_enable_interrupts+0x6e>
			USARTE0.CTRLA |= USART_DREINTLVL_HI_gc;
 3b8:	e0 ea       	ldi	r30, 0xA0	; 160
 3ba:	fa e0       	ldi	r31, 0x0A	; 10
 3bc:	83 81       	ldd	r24, Z+3	; 0x03
 3be:	83 60       	ori	r24, 0x03	; 3
 3c0:	83 83       	std	Z+3, r24	; 0x03
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
