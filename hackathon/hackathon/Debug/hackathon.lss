
hackathon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000284  00802000  000005f0  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00802284  00802284  00000908  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006f35  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004144  00000000  00000000  000079e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d32  00000000  00000000  0000bb29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  0000c85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004d75  00000000  00000000  0000ca28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000235  00000000  00000000  0001179d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000119d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__ctors_end>
   4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
   8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
   c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  10:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  14:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  18:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  1c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  20:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  24:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  28:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  2c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  30:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  34:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  38:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  3c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  40:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  44:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  48:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  4c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  50:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_20>
  54:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  58:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  5c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  60:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  64:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  68:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  6c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  70:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  74:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  78:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  7c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  80:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  84:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  88:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  8c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  90:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  94:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  98:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  9c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  a0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  a4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  a8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  ac:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  b0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  b4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  b8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  bc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  c0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  c4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  c8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  cc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  d0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  d4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  d8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  dc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  e0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  e4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  e8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  ec:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  f0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  f4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  f8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
  fc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 100:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 104:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 108:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 10c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 110:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 114:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 118:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 11c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 120:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 124:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 128:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 12c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 130:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 134:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 138:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 13c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 140:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 144:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 148:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 14c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 150:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 154:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 158:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 15c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 160:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 164:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 168:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 16c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 170:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 174:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 178:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 17c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 180:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 184:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 188:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 18c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 190:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 194:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 198:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 19c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1a0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1a4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1a8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1ac:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1b0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1b4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1b8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1bc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1c0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1c4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1c8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1cc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1d0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1d4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1d8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1dc:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1e0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1e4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1e8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1ec:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1f0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1f4:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1f8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__bad_interrupt>
 1fc:	e9 01       	movw	r28, r18
 1fe:	f7 01       	movw	r30, r14
 200:	39 02       	muls	r19, r25
 202:	39 02       	muls	r19, r25
 204:	1e 02       	muls	r17, r30
 206:	2c 02       	muls	r18, r28
 208:	39 02       	muls	r19, r25
 20a:	39 02       	muls	r19, r25
 20c:	39 02       	muls	r19, r25
 20e:	39 02       	muls	r19, r25
 210:	39 02       	muls	r19, r25
 212:	39 02       	muls	r19, r25
 214:	39 02       	muls	r19, r25
 216:	39 02       	muls	r19, r25
 218:	39 02       	muls	r19, r25
 21a:	39 02       	muls	r19, r25
 21c:	e2 01       	movw	r28, r4
 21e:	f0 01       	movw	r30, r0
 220:	fe 01       	movw	r30, r28
 222:	05 02       	muls	r16, r21
 224:	0c 02       	muls	r16, r28
 226:	39 02       	muls	r19, r25
 228:	33 02       	muls	r19, r19
 22a:	39 02       	muls	r19, r25
 22c:	39 02       	muls	r19, r25
 22e:	39 02       	muls	r19, r25
 230:	39 02       	muls	r19, r25
 232:	39 02       	muls	r19, r25
 234:	39 02       	muls	r19, r25
 236:	39 02       	muls	r19, r25
 238:	39 02       	muls	r19, r25
 23a:	39 02       	muls	r19, r25
 23c:	39 02       	muls	r19, r25
 23e:	39 02       	muls	r19, r25
 240:	25 02       	muls	r18, r21
 242:	39 02       	muls	r19, r25
 244:	39 02       	muls	r19, r25
 246:	39 02       	muls	r19, r25
 248:	13 02       	muls	r17, r19

0000024a <__trampolines_start>:
 24a:	0c 94 2c 02 	jmp	0x458	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 24e:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <set_note+0x28>
 252:	0c 94 05 02 	jmp	0x40a	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 256:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <set_note+0x44>
 25a:	0c 94 0c 02 	jmp	0x418	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 25e:	0c 94 33 02 	jmp	0x466	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 262:	0c 94 39 02 	jmp	0x472	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 266:	0c 94 13 02 	jmp	0x426	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 26a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <set_note+0x1a>
 26e:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 272:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <set_note+0x36>
 276:	0c 94 25 02 	jmp	0x44a	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 27a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <set_note+0x52>

0000027e <__ctors_end>:
 27e:	11 24       	eor	r1, r1
 280:	1f be       	out	0x3f, r1	; 63
 282:	cf ef       	ldi	r28, 0xFF	; 255
 284:	cd bf       	out	0x3d, r28	; 61
 286:	df e3       	ldi	r29, 0x3F	; 63
 288:	de bf       	out	0x3e, r29	; 62
 28a:	00 e0       	ldi	r16, 0x00	; 0
 28c:	0c bf       	out	0x3c, r16	; 60
 28e:	18 be       	out	0x38, r1	; 56
 290:	19 be       	out	0x39, r1	; 57
 292:	1a be       	out	0x3a, r1	; 58
 294:	1b be       	out	0x3b, r1	; 59

00000296 <__do_copy_data>:
 296:	12 e2       	ldi	r17, 0x22	; 34
 298:	a0 e0       	ldi	r26, 0x00	; 0
 29a:	b0 e2       	ldi	r27, 0x20	; 32
 29c:	e0 ef       	ldi	r30, 0xF0	; 240
 29e:	f5 e0       	ldi	r31, 0x05	; 5
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	0b bf       	out	0x3b, r16	; 59
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
 2a6:	07 90       	elpm	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	a4 38       	cpi	r26, 0x84	; 132
 2ac:	b1 07       	cpc	r27, r17
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>
 2b0:	1b be       	out	0x3b, r1	; 59

000002b2 <__do_clear_bss>:
 2b2:	22 e2       	ldi	r18, 0x22	; 34
 2b4:	a4 e8       	ldi	r26, 0x84	; 132
 2b6:	b2 e2       	ldi	r27, 0x22	; 34
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <.do_clear_bss_start>

000002ba <.do_clear_bss_loop>:
 2ba:	1d 92       	st	X+, r1

000002bc <.do_clear_bss_start>:
 2bc:	a9 38       	cpi	r26, 0x89	; 137
 2be:	b2 07       	cpc	r27, r18
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <.do_clear_bss_loop>
 2c2:	0e 94 3a 02 	call	0x474	; 0x474 <main>
 2c6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <_exit>

000002ca <__bad_interrupt>:
 2ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ce <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 2ce:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 2d0:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 2d2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

000002d6 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 2d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 2da:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 2de:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 2e0:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 2e4:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 2e6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

000002ea <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 2ea:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 2ec:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 2f0:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 2f2:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r24
 2f6:	8f 91       	pop	r24

 2f8:	08 95       	ret

000002fa <dac_init>:
#include "dac.h"

void dac_init(void) {
	DACA.CTRLA = DAC_CH1EN_bm;
 2fa:	e0 e0       	ldi	r30, 0x00	; 0
 2fc:	f3 e0       	ldi	r31, 0x03	; 3
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	80 83       	st	Z, r24
	
	DACA.CTRLB = DAC_CHSEL_SINGLE1_gc | DAC_CH1TRIG_bm;
 302:	82 e2       	ldi	r24, 0x22	; 34
 304:	81 83       	std	Z+1, r24	; 0x01
	
	DACA.CTRLC = ADC_REFSEL_INT1V_gc;
 306:	12 82       	std	Z+2, r1	; 0x02
	
	DACA.CTRLA |= DAC_ENABLE_bm;
 308:	80 81       	ld	r24, Z
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	80 83       	st	Z, r24
 30e:	08 95       	ret

00000310 <dma_init>:
 *  Author: sharoncomora
 */ 
#include "dma.h"
//#include "lut_8_1.h"

void dma_init(uint16_t * LUT, uint16_t dest_addr) {
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
	
	DMA.CTRL |= DMA_RESET_bm;
 314:	e0 e0       	ldi	r30, 0x00	; 0
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	20 81       	ld	r18, Z
 31a:	20 64       	ori	r18, 0x40	; 64
 31c:	20 83       	st	Z, r18
	
	DMA.CH0.CTRLA =	DMA_CH_SINGLE_bm |
 31e:	25 e0       	ldi	r18, 0x05	; 5
 320:	20 8b       	std	Z+16, r18	; 0x10
	DMA_CH_BURSTLEN_2BYTE_gc;
	

	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	23 8b       	std	Z+19, r18	; 0x13
	uint8_t LUT_size = (uint8_t) (512);
	DMA.CH0.TRFCNT = 512;
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	32 e0       	ldi	r19, 0x02	; 2
 32a:	24 8b       	std	Z+20, r18	; 0x14
 32c:	35 8b       	std	Z+21, r19	; 0x15
	DMA.CH0.SRCADDR0 = byte0(LUT);
 32e:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = byte1(LUT);
 330:	09 2e       	mov	r0, r25
 332:	00 0c       	add	r0, r0
 334:	aa 0b       	sbc	r26, r26
 336:	bb 0b       	sbc	r27, r27
 338:	09 2f       	mov	r16, r25
 33a:	1a 2f       	mov	r17, r26
 33c:	2b 2f       	mov	r18, r27
 33e:	33 27       	eor	r19, r19
 340:	01 8f       	std	Z+25, r16	; 0x19
	DMA.CH0.SRCADDR2 = byte2(LUT);
 342:	cd 01       	movw	r24, r26
 344:	aa 27       	eor	r26, r26
 346:	bb 27       	eor	r27, r27
 348:	82 8f       	std	Z+26, r24	; 0x1a
	
	DMA.CH0.DESTADDR0 = byte0(dest_addr);
 34a:	64 8f       	std	Z+28, r22	; 0x1c
	DMA.CH0.DESTADDR1 = byte1(dest_addr);
 34c:	75 8f       	std	Z+29, r23	; 0x1d
	DMA.CH0.DESTADDR2 = byte2(dest_addr);
 34e:	16 8e       	std	Z+30, r1	; 0x1e
	
	while(DMA.CH0.CTRLB & DMA_CH_CHBUSY_bm);
 350:	81 89       	ldd	r24, Z+17	; 0x11
 352:	88 23       	and	r24, r24
 354:	ec f3       	brlt	.-6      	; 0x350 <dma_init+0x40>
	
	DMA.CH0.REPCNT = 0;
 356:	e0 e0       	ldi	r30, 0x00	; 0
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.ADDRCTRL =	DMA_CH_SRCRELOAD_BLOCK_gc |
 35c:	89 e5       	ldi	r24, 0x59	; 89
 35e:	82 8b       	std	Z+18, r24	; 0x12
						DMA_CH_SRCDIR_INC_gc |
						DMA_CH_DESTRELOAD_BURST_gc |
						DMA_CH_DESTDIR_INC_gc;
	DMA.CH0.CTRLA |= DMA_CH_REPEAT_bm;
 360:	80 89       	ldd	r24, Z+16	; 0x10
 362:	80 62       	ori	r24, 0x20	; 32
 364:	80 8b       	std	Z+16, r24	; 0x10
	
	//DMA.CH0.CTRLB |= DMA_CH_TRNINTLVL_LO_gc;
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 366:	80 89       	ldd	r24, Z+16	; 0x10
 368:	80 68       	ori	r24, 0x80	; 128
 36a:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CTRL |= DMA_ENABLE_bm;
 36c:	80 81       	ld	r24, Z
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	80 83       	st	Z, r24
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <__vector_20>:
	PORTC.DIRSET = PIN7_bm;
}

void init_gpio(void) {
	PORTD.OUTSET = PIN4_bm | PIN6_bm;
	PORTD.DIRSET = PIN4_bm | PIN6_bm;
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	08 b6       	in	r0, 0x38	; 56
 384:	0f 92       	push	r0
 386:	18 be       	out	0x38, r1	; 56
 388:	8f 93       	push	r24
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 84 22 	sts	0x2284, r24	; 0x802284 <__data_end>
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	08 be       	out	0x38, r0	; 56
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <sys_interr_init>:
}


void sys_interr_init(void) {
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 3a6:	78 94       	sei
 3a8:	08 95       	ret

000003aa <set_note>:
}

void set_note(char note) {
	//delay few ms
	switch(note) {
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	f3 97       	sbiw	r30, 0x33	; 51
 3b0:	e7 32       	cpi	r30, 0x27	; 39
 3b2:	f1 05       	cpc	r31, r1
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <set_note+0xe>
 3b6:	5d c0       	rjmp	.+186    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 3b8:	88 27       	eor	r24, r24
 3ba:	e2 50       	subi	r30, 0x02	; 2
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	8f 4f       	sbci	r24, 0xFF	; 255
 3c0:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__tablejump2__>
		case 'C': {
			TCC0.PER = (uint16_t) 119;
 3c4:	87 e7       	ldi	r24, 0x77	; 119
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3cc:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3d0:	08 95       	ret
		}
		case '3': {
			TCC0.PER = (uint16_t) 113;
 3d2:	81 e7       	ldi	r24, 0x71	; 113
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3da:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3de:	08 95       	ret
		}
		case 'D': {
			TCC0.PER = (uint16_t) 106;
 3e0:	8a e6       	ldi	r24, 0x6A	; 106
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3e8:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3ec:	08 95       	ret
		}
		case '4': {
			TCC0.PER = (uint16_t) 100;
 3ee:	84 e6       	ldi	r24, 0x64	; 100
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3f6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3fa:	08 95       	ret
		}
		case 'E': {
			TCC0.PER = (uint16_t) 95;
 3fc:	8f e5       	ldi	r24, 0x5F	; 95
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 404:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 408:	08 95       	ret
		}
		case 'F': {
			TCC0.PER = (uint16_t) 89;
 40a:	89 e5       	ldi	r24, 0x59	; 89
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 412:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 416:	08 95       	ret
		}
		case 'G': {
			TCC0.PER = (uint16_t) 84;
 418:	84 e5       	ldi	r24, 0x54	; 84
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 420:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 424:	08 95       	ret
		}
		case 'Y': {
			TCC0.PER = (uint16_t) 79;
 426:	8f e4       	ldi	r24, 0x4F	; 79
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 42e:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			TCC1.CNT = 0;
 432:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
 436:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
			break;
 43a:	08 95       	ret
		}
		case '7': {
			TCC0.PER = (uint16_t) 75;
 43c:	8b e4       	ldi	r24, 0x4B	; 75
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 444:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 448:	08 95       	ret
		}
		case 'U': {
			TCC0.PER = (uint16_t) 71;
 44a:	87 e4       	ldi	r24, 0x47	; 71
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 452:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 456:	08 95       	ret
		}
		case '8': {
			TCC0.PER = (uint16_t) 67;
 458:	83 e4       	ldi	r24, 0x43	; 67
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 460:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 464:	08 95       	ret
		}
		case 'I': {
			TCC0.PER = (uint16_t) 63;
 466:	8f e3       	ldi	r24, 0x3F	; 63
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 46e:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 472:	08 95       	ret

00000474 <main>:
//global flag to indicate when quarter sec has elapsed
volatile uint8_t quarterSecElapsed = 0;

int main(void)
{
	clock_init();
 474:	0e 94 67 01 	call	0x2ce	; 0x2ce <clock_init>
	
	//baud=0; bsel=0 => baud = 2MHz
	USARTE0_init(0,0);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 a6 02 	call	0x54c	; 0x54c <USARTE0_init>
	dac_init();
 482:	0e 94 7d 01 	call	0x2fa	; 0x2fa <dac_init>
	dma_init(sin, &DACA_CH1DATA);
 486:	6a e1       	ldi	r22, 0x1A	; 26
 488:	73 e0       	ldi	r23, 0x03	; 3
 48a:	83 e8       	ldi	r24, 0x83	; 131
 48c:	90 e2       	ldi	r25, 0x20	; 32
 48e:	0e 94 88 01 	call	0x310	; 0x310 <dma_init>
	
	//enable usart for low-level receive interrupts
	USARTE0_enable_interrupts('R', 'L');
 492:	6c e4       	ldi	r22, 0x4C	; 76
 494:	82 e5       	ldi	r24, 0x52	; 82
 496:	0e 94 b5 02 	call	0x56a	; 0x56a <USARTE0_enable_interrupts>
	
	//enable frequency timer (DMA)
	tcc0_init();
 49a:	0e 94 86 02 	call	0x50c	; 0x50c <tcc0_init>
	
	//enable note timer (0.25 s)
	tcc1_init();
 49e:	0e 94 9b 02 	call	0x536	; 0x536 <tcc1_init>
	tcc1_enable();
 4a2:	0e 94 94 02 	call	0x528	; 0x528 <tcc1_enable>
	sys_interr_init();
 4a6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <sys_interr_init>
	
	char * song = mary;
    while (1) 
    {
		if (quarterSecElapsed) {
 4aa:	80 91 84 22 	lds	r24, 0x2284	; 0x802284 <__data_end>
 4ae:	88 23       	and	r24, r24
 4b0:	e1 f3       	breq	.-8      	; 0x4aa <main+0x36>
			quarterSecElapsed = 0;
 4b2:	10 92 84 22 	sts	0x2284, r1	; 0x802284 <__data_end>
			if (!noteDuration) {
 4b6:	80 91 86 22 	lds	r24, 0x2286	; 0x802286 <noteDuration>
 4ba:	81 11       	cpse	r24, r1
 4bc:	f6 cf       	rjmp	.-20     	; 0x4aa <main+0x36>
				note = song[songVectIndexer++];
 4be:	80 91 87 22 	lds	r24, 0x2287	; 0x802287 <songVectIndexer>
 4c2:	90 91 88 22 	lds	r25, 0x2288	; 0x802288 <songVectIndexer+0x1>
 4c6:	9c 01       	movw	r18, r24
 4c8:	2f 5f       	subi	r18, 0xFF	; 255
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
 4cc:	20 93 87 22 	sts	0x2287, r18	; 0x802287 <songVectIndexer>
 4d0:	30 93 88 22 	sts	0x2288, r19	; 0x802288 <songVectIndexer+0x1>
 4d4:	fc 01       	movw	r30, r24
 4d6:	e0 50       	subi	r30, 0x00	; 0
 4d8:	f0 4e       	sbci	r31, 0xE0	; 224
 4da:	80 81       	ld	r24, Z
 4dc:	80 93 85 22 	sts	0x2285, r24	; 0x802285 <note>
				set_note(note);
 4e0:	80 91 85 22 	lds	r24, 0x2285	; 0x802285 <note>
 4e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <set_note>
				noteDuration = song[songVectIndexer++];
 4e8:	80 91 87 22 	lds	r24, 0x2287	; 0x802287 <songVectIndexer>
 4ec:	90 91 88 22 	lds	r25, 0x2288	; 0x802288 <songVectIndexer+0x1>
 4f0:	9c 01       	movw	r18, r24
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	20 93 87 22 	sts	0x2287, r18	; 0x802287 <songVectIndexer>
 4fa:	30 93 88 22 	sts	0x2288, r19	; 0x802288 <songVectIndexer+0x1>
 4fe:	fc 01       	movw	r30, r24
 500:	e0 50       	subi	r30, 0x00	; 0
 502:	f0 4e       	sbci	r31, 0xE0	; 224
 504:	80 81       	ld	r24, Z
 506:	80 93 86 22 	sts	0x2286, r24	; 0x802286 <noteDuration>
 50a:	cf cf       	rjmp	.-98     	; 0x4aa <main+0x36>

0000050c <tcc0_init>:
	TCC0.CNT = 0;
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
}

void tcc1_disable(void) {
	TCC1.CTRLA = TC_CLKSEL_OFF_gc;
 50c:	e0 e0       	ldi	r30, 0x00	; 0
 50e:	f8 e0       	ldi	r31, 0x08	; 8
 510:	87 e4       	ldi	r24, 0x47	; 71
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	86 a3       	std	Z+38, r24	; 0x26
 516:	97 a3       	std	Z+39, r25	; 0x27
 518:	80 ec       	ldi	r24, 0xC0	; 192
 51a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 51e:	87 e0       	ldi	r24, 0x07	; 7
 520:	80 83       	st	Z, r24
 522:	10 a2       	std	Z+32, r1	; 0x20
 524:	11 a2       	std	Z+33, r1	; 0x21
 526:	08 95       	ret

00000528 <tcc1_enable>:
	
}

void tcc1_enable(void) {
	TCC1.CNT = 0;
 528:	e0 e4       	ldi	r30, 0x40	; 64
 52a:	f8 e0       	ldi	r31, 0x08	; 8
 52c:	10 a2       	std	Z+32, r1	; 0x20
 52e:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
 530:	87 e0       	ldi	r24, 0x07	; 7
 532:	80 83       	st	Z, r24
 534:	08 95       	ret

00000536 <tcc1_init>:
}

void tcc1_init(void) {
	/* 5ms */
	TCC1.PER = 8000;
 536:	e0 e4       	ldi	r30, 0x40	; 64
 538:	f8 e0       	ldi	r31, 0x08	; 8
 53a:	80 e4       	ldi	r24, 0x40	; 64
 53c:	9f e1       	ldi	r25, 0x1F	; 31
 53e:	86 a3       	std	Z+38, r24	; 0x26
 540:	97 a3       	std	Z+39, r25	; 0x27
	TCC1.INTCTRLA = TC1_OVFINTLVL0_bm;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	86 83       	std	Z+6, r24	; 0x06
	TCC1.CNT = 0;
 546:	10 a2       	std	Z+32, r1	; 0x20
 548:	11 a2       	std	Z+33, r1	; 0x21
 54a:	08 95       	ret

0000054c <USARTE0_init>:
}

char USARTE0_in_char(void) {
	while(!(USARTE0.STATUS & USART_RXCIF_bm));
	return USARTE0.DATA;
}
 54c:	24 e0       	ldi	r18, 0x04	; 4
 54e:	20 93 82 06 	sts	0x0682, r18	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
 552:	e0 ea       	ldi	r30, 0xA0	; 160
 554:	fa e0       	ldi	r31, 0x0A	; 10
 556:	86 83       	std	Z+6, r24	; 0x06
 558:	62 95       	swap	r22
 55a:	60 7f       	andi	r22, 0xF0	; 240
 55c:	96 2b       	or	r25, r22
 55e:	97 83       	std	Z+7, r25	; 0x07
 560:	83 e0       	ldi	r24, 0x03	; 3
 562:	85 83       	std	Z+5, r24	; 0x05
 564:	88 e1       	ldi	r24, 0x18	; 24
 566:	84 83       	std	Z+4, r24	; 0x04
 568:	08 95       	ret

0000056a <USARTE0_enable_interrupts>:
}
*/

void USARTE0_enable_interrupts(char intType, char intLevel) {
	//receive
	if (intType == 'r' || intType == 'R') {
 56a:	98 2f       	mov	r25, r24
 56c:	9f 7d       	andi	r25, 0xDF	; 223
 56e:	92 35       	cpi	r25, 0x52	; 82
 570:	c9 f4       	brne	.+50     	; 0x5a4 <USARTE0_enable_interrupts+0x3a>
		if (intLevel == 'l' || intLevel == 'L') {
 572:	6f 7d       	andi	r22, 0xDF	; 223
 574:	6c 34       	cpi	r22, 0x4C	; 76
 576:	31 f4       	brne	.+12     	; 0x584 <USARTE0_enable_interrupts+0x1a>
			USARTE0.CTRLA |= USART_RXCINTLVL_LO_gc;
 578:	e0 ea       	ldi	r30, 0xA0	; 160
 57a:	fa e0       	ldi	r31, 0x0A	; 10
 57c:	83 81       	ldd	r24, Z+3	; 0x03
 57e:	80 61       	ori	r24, 0x10	; 16
 580:	83 83       	std	Z+3, r24	; 0x03
 582:	08 95       	ret
		}
		else if (intLevel == 'm' || intLevel == 'M') {
 584:	6d 34       	cpi	r22, 0x4D	; 77
 586:	31 f4       	brne	.+12     	; 0x594 <USARTE0_enable_interrupts+0x2a>
			USARTE0.CTRLA |= USART_RXCINTLVL_MED_gc;
 588:	e0 ea       	ldi	r30, 0xA0	; 160
 58a:	fa e0       	ldi	r31, 0x0A	; 10
 58c:	83 81       	ldd	r24, Z+3	; 0x03
 58e:	80 62       	ori	r24, 0x20	; 32
 590:	83 83       	std	Z+3, r24	; 0x03
 592:	08 95       	ret
		}
		else if (intLevel == 'h' || intLevel == 'H') {
 594:	68 34       	cpi	r22, 0x48	; 72
 596:	01 f5       	brne	.+64     	; 0x5d8 <USARTE0_enable_interrupts+0x6e>
			USARTE0.CTRLA |= USART_RXCINTLVL_HI_gc;
 598:	e0 ea       	ldi	r30, 0xA0	; 160
 59a:	fa e0       	ldi	r31, 0x0A	; 10
 59c:	83 81       	ldd	r24, Z+3	; 0x03
 59e:	80 63       	ori	r24, 0x30	; 48
 5a0:	83 83       	std	Z+3, r24	; 0x03
 5a2:	08 95       	ret
		}
	}
	else if (intType == 't' || intType == 't') {
 5a4:	84 37       	cpi	r24, 0x74	; 116
 5a6:	c1 f4       	brne	.+48     	; 0x5d8 <USARTE0_enable_interrupts+0x6e>
		if (intLevel == 'l' || intLevel == 'L') {
 5a8:	6f 7d       	andi	r22, 0xDF	; 223
 5aa:	6c 34       	cpi	r22, 0x4C	; 76
 5ac:	31 f4       	brne	.+12     	; 0x5ba <USARTE0_enable_interrupts+0x50>
			USARTE0.CTRLA |= USART_DREINTLVL_LO_gc;
 5ae:	e0 ea       	ldi	r30, 0xA0	; 160
 5b0:	fa e0       	ldi	r31, 0x0A	; 10
 5b2:	83 81       	ldd	r24, Z+3	; 0x03
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	83 83       	std	Z+3, r24	; 0x03
 5b8:	08 95       	ret
		}
		else if (intLevel == 'm' || intLevel == 'M') {
 5ba:	6d 34       	cpi	r22, 0x4D	; 77
 5bc:	31 f4       	brne	.+12     	; 0x5ca <USARTE0_enable_interrupts+0x60>
			USARTE0.CTRLA |= USART_DREINTLVL_MED_gc;
 5be:	e0 ea       	ldi	r30, 0xA0	; 160
 5c0:	fa e0       	ldi	r31, 0x0A	; 10
 5c2:	83 81       	ldd	r24, Z+3	; 0x03
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	83 83       	std	Z+3, r24	; 0x03
 5c8:	08 95       	ret
		}
		else if (intLevel == 'h' || intLevel == 'H') {
 5ca:	68 34       	cpi	r22, 0x48	; 72
 5cc:	29 f4       	brne	.+10     	; 0x5d8 <USARTE0_enable_interrupts+0x6e>
			USARTE0.CTRLA |= USART_DREINTLVL_HI_gc;
 5ce:	e0 ea       	ldi	r30, 0xA0	; 160
 5d0:	fa e0       	ldi	r31, 0x0A	; 10
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	83 60       	ori	r24, 0x03	; 3
 5d6:	83 83       	std	Z+3, r24	; 0x03
 5d8:	08 95       	ret

000005da <__tablejump2__>:
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	88 1f       	adc	r24, r24
 5e0:	8b bf       	out	0x3b, r24	; 59
 5e2:	07 90       	elpm	r0, Z+
 5e4:	f6 91       	elpm	r31, Z
 5e6:	e0 2d       	mov	r30, r0
 5e8:	1b be       	out	0x3b, r1	; 59
 5ea:	19 94       	eijmp

000005ec <_exit>:
 5ec:	f8 94       	cli

000005ee <__stop_program>:
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <__stop_program>
