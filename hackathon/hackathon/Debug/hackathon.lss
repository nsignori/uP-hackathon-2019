
hackathon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000388  00802000  0000078a  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802388  00802388  00000ba6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000709d  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004178  00000000  00000000  00007df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e94  00000000  00000000  0000bf6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000ce04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e00  00000000  00000000  0000d028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000401  00000000  00000000  00011e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00012229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 01 	jmp	0x256	; 0x256 <__ctors_end>
   4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
   8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
   c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  10:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  14:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  18:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  1c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  20:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  24:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  28:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  2c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  30:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  38:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  3c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  40:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  44:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  48:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  4c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_20>
  54:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  58:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  5c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  60:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  64:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  68:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  6c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  70:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  74:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  78:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  7c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  80:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  84:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  88:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  8c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  90:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  94:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  98:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  9c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  a0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  a4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  a8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  ac:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  b0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  b4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  b8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  bc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  c0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  c4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  c8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  cc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  d0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  d4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  d8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  dc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  e0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  e4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  e8:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_58>
  ec:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  f0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  f4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  f8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
  fc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 100:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 104:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 108:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 10c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 110:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 114:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 118:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 11c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 120:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 124:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 128:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 12c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 130:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 134:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 138:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 13c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 140:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 144:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 148:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 14c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 150:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 154:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 158:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 15c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 160:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 164:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 168:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 16c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 170:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 174:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 178:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 17c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 180:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 184:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 188:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 18c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 190:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 194:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 198:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 19c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1a0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1a4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1a8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1ac:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1b0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1b4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1b8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1bc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1c0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1c4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1c8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1cc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1d0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1d4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1d8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1dc:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1e0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1e4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1e8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1ec:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1f0:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1f4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1f8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
 1fc:	14 02       	muls	r17, r20
 1fe:	16 02       	muls	r17, r22
 200:	16 02       	muls	r17, r22
 202:	16 02       	muls	r17, r22
 204:	16 02       	muls	r17, r22
 206:	16 02       	muls	r17, r22
 208:	16 02       	muls	r17, r22
 20a:	16 02       	muls	r17, r22
 20c:	16 02       	muls	r17, r22
 20e:	16 02       	muls	r17, r22
 210:	16 02       	muls	r17, r22
 212:	16 02       	muls	r17, r22
 214:	16 02       	muls	r17, r22
 216:	16 02       	muls	r17, r22
 218:	16 02       	muls	r17, r22
 21a:	16 02       	muls	r17, r22
 21c:	16 02       	muls	r17, r22
 21e:	16 02       	muls	r17, r22
 220:	16 02       	muls	r17, r22
 222:	16 02       	muls	r17, r22
 224:	06 02       	muls	r16, r22
 226:	0d 02       	muls	r16, r29
 228:	e3 01       	movw	r28, r6
 22a:	ea 01       	movw	r28, r20
 22c:	f1 01       	movw	r30, r2
 22e:	f8 01       	movw	r30, r16
 230:	ff 01       	movw	r30, r30

00000232 <__trampolines_start>:
 232:	0c 94 16 02 	jmp	0x42c	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 236:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <set_note+0x70>
 23a:	0c 94 06 02 	jmp	0x40c	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 23e:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 242:	0c 94 14 02 	jmp	0x428	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 246:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <set_note+0x38>
 24a:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <set_note+0x62>
 24e:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <set_note+0x54>
 252:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <set_note+0x46>

00000256 <__ctors_end>:
 256:	11 24       	eor	r1, r1
 258:	1f be       	out	0x3f, r1	; 63
 25a:	cf ef       	ldi	r28, 0xFF	; 255
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	df e3       	ldi	r29, 0x3F	; 63
 260:	de bf       	out	0x3e, r29	; 62
 262:	00 e0       	ldi	r16, 0x00	; 0
 264:	0c bf       	out	0x3c, r16	; 60
 266:	18 be       	out	0x38, r1	; 56
 268:	19 be       	out	0x39, r1	; 57
 26a:	1a be       	out	0x3a, r1	; 58
 26c:	1b be       	out	0x3b, r1	; 59

0000026e <__do_copy_data>:
 26e:	13 e2       	ldi	r17, 0x23	; 35
 270:	a0 e0       	ldi	r26, 0x00	; 0
 272:	b0 e2       	ldi	r27, 0x20	; 32
 274:	ea e8       	ldi	r30, 0x8A	; 138
 276:	f7 e0       	ldi	r31, 0x07	; 7
 278:	00 e0       	ldi	r16, 0x00	; 0
 27a:	0b bf       	out	0x3b, r16	; 59
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
 27e:	07 90       	elpm	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	a8 38       	cpi	r26, 0x88	; 136
 284:	b1 07       	cpc	r27, r17
 286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>
 288:	1b be       	out	0x3b, r1	; 59

0000028a <__do_clear_bss>:
 28a:	23 e2       	ldi	r18, 0x23	; 35
 28c:	a8 e8       	ldi	r26, 0x88	; 136
 28e:	b3 e2       	ldi	r27, 0x23	; 35
 290:	01 c0       	rjmp	.+2      	; 0x294 <.do_clear_bss_start>

00000292 <.do_clear_bss_loop>:
 292:	1d 92       	st	X+, r1

00000294 <.do_clear_bss_start>:
 294:	af 38       	cpi	r26, 0x8F	; 143
 296:	b2 07       	cpc	r27, r18
 298:	e1 f7       	brne	.-8      	; 0x292 <.do_clear_bss_loop>
 29a:	0e 94 17 02 	call	0x42e	; 0x42e <main>
 29e:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

000002a2 <__bad_interrupt>:
 2a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a6 <clock_init>:
 2a6:	8f 93       	push	r24
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

000002ae <check32MHzStatus>:
 2ae:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 2b2:	81 ff       	sbrs	r24, 1
 2b4:	fc cf       	rjmp	.-8      	; 0x2ae <check32MHzStatus>
 2b6:	88 ed       	ldi	r24, 0xD8	; 216
 2b8:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

000002c2 <skip32MHZ_enable>:
 2c2:	88 ed       	ldi	r24, 0xD8	; 216
 2c4:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
 2ce:	8f 91       	pop	r24
 2d0:	08 95       	ret

000002d2 <dac_init>:
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f3 e0       	ldi	r31, 0x03	; 3
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	80 83       	st	Z, r24
 2da:	82 e2       	ldi	r24, 0x22	; 34
 2dc:	81 83       	std	Z+1, r24	; 0x01
 2de:	12 82       	std	Z+2, r1	; 0x02
 2e0:	80 81       	ld	r24, Z
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	80 83       	st	Z, r24
 2e6:	08 95       	ret

000002e8 <dma_init>:
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	e0 e0       	ldi	r30, 0x00	; 0
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	20 81       	ld	r18, Z
 2f2:	20 64       	ori	r18, 0x40	; 64
 2f4:	20 83       	st	Z, r18
 2f6:	25 e0       	ldi	r18, 0x05	; 5
 2f8:	20 8b       	std	Z+16, r18	; 0x10
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	23 8b       	std	Z+19, r18	; 0x13
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	32 e0       	ldi	r19, 0x02	; 2
 302:	24 8b       	std	Z+20, r18	; 0x14
 304:	35 8b       	std	Z+21, r19	; 0x15
 306:	80 8f       	std	Z+24, r24	; 0x18
 308:	09 2e       	mov	r0, r25
 30a:	00 0c       	add	r0, r0
 30c:	aa 0b       	sbc	r26, r26
 30e:	bb 0b       	sbc	r27, r27
 310:	09 2f       	mov	r16, r25
 312:	1a 2f       	mov	r17, r26
 314:	2b 2f       	mov	r18, r27
 316:	33 27       	eor	r19, r19
 318:	01 8f       	std	Z+25, r16	; 0x19
 31a:	cd 01       	movw	r24, r26
 31c:	aa 27       	eor	r26, r26
 31e:	bb 27       	eor	r27, r27
 320:	82 8f       	std	Z+26, r24	; 0x1a
 322:	64 8f       	std	Z+28, r22	; 0x1c
 324:	75 8f       	std	Z+29, r23	; 0x1d
 326:	16 8e       	std	Z+30, r1	; 0x1e
 328:	81 89       	ldd	r24, Z+17	; 0x11
 32a:	88 23       	and	r24, r24
 32c:	ec f3       	brlt	.-6      	; 0x328 <dma_init+0x40>
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	16 8a       	std	Z+22, r1	; 0x16
 334:	89 e5       	ldi	r24, 0x59	; 89
 336:	82 8b       	std	Z+18, r24	; 0x12
 338:	80 89       	ldd	r24, Z+16	; 0x10
 33a:	80 62       	ori	r24, 0x20	; 32
 33c:	80 8b       	std	Z+16, r24	; 0x10
 33e:	80 89       	ldd	r24, Z+16	; 0x10
 340:	80 68       	ori	r24, 0x80	; 128
 342:	80 8b       	std	Z+16, r24	; 0x10
 344:	80 81       	ld	r24, Z
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 83       	st	Z, r24
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <__vector_20>:
	PORTC.DIRSET = PIN7_bm;
}

void init_gpio(void) {
	PORTD.OUTSET = PIN4_bm | PIN6_bm;
	PORTD.DIRSET = PIN4_bm | PIN6_bm;
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	08 b6       	in	r0, 0x38	; 56
 35c:	0f 92       	push	r0
 35e:	18 be       	out	0x38, r1	; 56
 360:	8f 93       	push	r24
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 88 23 	sts	0x2388, r24	; 0x802388 <__data_end>
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	08 be       	out	0x38, r0	; 56
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <speaker_init>:
 378:	e0 e4       	ldi	r30, 0x40	; 64
 37a:	f6 e0       	ldi	r31, 0x06	; 6
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	85 83       	std	Z+5, r24	; 0x05
 380:	81 83       	std	Z+1, r24	; 0x01
 382:	08 95       	ret

00000384 <sys_interr_init>:
}


void sys_interr_init(void) {
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 384:	87 e0       	ldi	r24, 0x07	; 7
 386:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 38a:	78 94       	sei
 38c:	08 95       	ret

0000038e <set_note>:
}

void set_note(char note) {
 38e:	e8 2f       	mov	r30, r24
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 390:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	while (TCC1.CNT < 3000);
 394:	a0 e4       	ldi	r26, 0x40	; 64
 396:	b8 e0       	ldi	r27, 0x08	; 8
 398:	90 96       	adiw	r26, 0x20	; 32
 39a:	2d 91       	ld	r18, X+
 39c:	3c 91       	ld	r19, X
 39e:	91 97       	sbiw	r26, 0x21	; 33
 3a0:	28 3b       	cpi	r18, 0xB8	; 184
 3a2:	3b 40       	sbci	r19, 0x0B	; 11
 3a4:	c8 f3       	brcs	.-14     	; 0x398 <set_note+0xa>
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	switch(note) {
 3ac:	8e 2f       	mov	r24, r30
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	bd 97       	sbiw	r30, 0x2d	; 45
 3b4:	eb 31       	cpi	r30, 0x1B	; 27
 3b6:	f1 05       	cpc	r31, r1
 3b8:	c8 f5       	brcc	.+114    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3ba:	88 27       	eor	r24, r24
 3bc:	e2 50       	subi	r30, 0x02	; 2
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	0c 94 ba 03 	jmp	0x774	; 0x774 <__tablejump2__>
		case 'C': {
			TCC0.PER = 120; // 1046.50 Hz
 3c6:	88 e7       	ldi	r24, 0x78	; 120
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3ce:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3d2:	08 95       	ret
		}
		case 'D': {
			TCC0.PER = 108; // 1174.66 Hz
 3d4:	8c e6       	ldi	r24, 0x6C	; 108
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3dc:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3e0:	08 95       	ret
		}
		case 'E': {
			TCC0.PER = 96; // 1318.51 Hz
 3e2:	80 e6       	ldi	r24, 0x60	; 96
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3ea:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3ee:	08 95       	ret
		}
		case 'F': {
			TCC0.PER = 91; // 1396.91 Hz
 3f0:	8b e5       	ldi	r24, 0x5B	; 91
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3f8:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 3fc:	08 95       	ret
		}
		case 'G': {
			TCC0.PER = 81; // 1567.98 Hz
 3fe:	81 e5       	ldi	r24, 0x51	; 81
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 406:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 40a:	08 95       	ret
		}
		case 'A': {
			TCC0.PER = 71; // 1760 Hz
 40c:	87 e4       	ldi	r24, 0x47	; 71
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 414:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 418:	08 95       	ret
		}
		case 'B': {
			TCC0.PER = 64; // 1975.53 Hz
 41a:	80 e4       	ldi	r24, 0x40	; 64
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 422:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
			break;
 426:	08 95       	ret
		}
		case '-': {
			TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 428:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 42c:	08 95       	ret

0000042e <main>:
volatile uint8_t codes[2];
volatile uint8_t nextCode = 5; // Init to 5 so it doesn't trigger UART stuff

int main(void)
{
	PORTJ.DIRSET = 0xF;
 42e:	c0 e0       	ldi	r28, 0x00	; 0
 430:	d7 e0       	ldi	r29, 0x07	; 7
 432:	8f e0       	ldi	r24, 0x0F	; 15
 434:	89 83       	std	Y+1, r24	; 0x01
	clock_init();
 436:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clock_init>
	speaker_init();
 43a:	0e 94 bc 01 	call	0x378	; 0x378 <speaker_init>
	//bscale=0; bsel=1110 => baud = 2MHz
	USARTE0_init(1110, 0);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	86 e5       	ldi	r24, 0x56	; 86
 442:	94 e0       	ldi	r25, 0x04	; 4
 444:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <USARTE0_init>
	dac_init();
 448:	0e 94 69 01 	call	0x2d2	; 0x2d2 <dac_init>
	dma_init(sin, &DACA_CH1DATA);
 44c:	6a e1       	ldi	r22, 0x1A	; 26
 44e:	73 e0       	ldi	r23, 0x03	; 3
 450:	87 e8       	ldi	r24, 0x87	; 135
 452:	91 e2       	ldi	r25, 0x21	; 33
 454:	0e 94 74 01 	call	0x2e8	; 0x2e8 <dma_init>
	
	//enable usart for low-level receive interrupts
	USARTE0_enable_interrupts('R', 'L');
 458:	6c e4       	ldi	r22, 0x4C	; 76
 45a:	82 e5       	ldi	r24, 0x52	; 82
 45c:	0e 94 82 03 	call	0x704	; 0x704 <USARTE0_enable_interrupts>
	
	//enable frequency timer (DMA)
	tcc0_init();
 460:	0e 94 4b 03 	call	0x696	; 0x696 <tcc0_init>
	
	//enable note timer (0.25 s)
	tcc1_init();
 464:	0e 94 60 03 	call	0x6c0	; 0x6c0 <tcc1_init>
	tcc1_enable();
 468:	0e 94 59 03 	call	0x6b2	; 0x6b2 <tcc1_enable>
	sys_interr_init();
 46c:	0e 94 c2 01 	call	0x384	; 0x384 <sys_interr_init>
	
	char* song = mary;
	uint8_t songSize = sizeof(mary);
	PORTJ.OUT = 0x1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	8c 83       	std	Y+4, r24	; 0x04
	tcc1_init();
	tcc1_enable();
	sys_interr_init();
	
	char* song = mary;
	uint8_t songSize = sizeof(mary);
 474:	0f 2e       	mov	r0, r31
 476:	f3 e8       	ldi	r31, 0x83	; 131
 478:	6f 2e       	mov	r6, r31
 47a:	f0 2d       	mov	r31, r0
	//enable note timer (0.25 s)
	tcc1_init();
	tcc1_enable();
	sys_interr_init();
	
	char* song = mary;
 47c:	0f 2e       	mov	r0, r31
 47e:	f4 e0       	ldi	r31, 0x04	; 4
 480:	8f 2e       	mov	r8, r31
 482:	f1 e2       	ldi	r31, 0x21	; 33
 484:	9f 2e       	mov	r9, r31
 486:	f0 2d       	mov	r31, r0
	uint8_t songSize = sizeof(mary);
	PORTJ.OUT = 0x1;
    while (1) 
    {
		if(nextCode == 2) {
			nextCode = 3;
 488:	0f 2e       	mov	r0, r31
 48a:	f3 e0       	ldi	r31, 0x03	; 3
 48c:	7f 2e       	mov	r7, r31
 48e:	f0 2d       	mov	r31, r0
			if(codes[0] == 0x55 && codes[1] == 0x77) { // Button 1 - 0x5577
 490:	cd e8       	ldi	r28, 0x8D	; 141
 492:	d3 e2       	ldi	r29, 0x23	; 35
			} else if(codes[0] == 0x57 && codes[1] == 0xD7) { // Button 4 - 0x57D7
				song = bday;
				songVectIndexer = 0;
				songSize = sizeof(bday);
				noteDuration = 0;
				PORTJ.OUT = 0x8;
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	17 e0       	ldi	r17, 0x07	; 7
 498:	68 94       	set
 49a:	22 24       	eor	r2, r2
 49c:	23 f8       	bld	r2, 3
			} else if(codes[0] == 0xD7 && codes[1] == 0x57) { // Button 3 - 0xD757
				song = jingle;
				songVectIndexer = 0;
				songSize = sizeof(jingle);
				noteDuration = 0;
				PORTJ.OUT = 0x4;
 49e:	68 94       	set
 4a0:	33 24       	eor	r3, r3
 4a2:	32 f8       	bld	r3, 2
				songVectIndexer = 0;
				songSize = sizeof(twinkle);
				noteDuration = 0;
				PORTJ.OUT = 0x2;
			} else if(codes[0] == 0xD7 && codes[1] == 0x57) { // Button 3 - 0xD757
				song = jingle;
 4a4:	0f 2e       	mov	r0, r31
 4a6:	f9 e8       	ldi	r31, 0x89	; 137
 4a8:	af 2e       	mov	r10, r31
 4aa:	f0 e2       	ldi	r31, 0x20	; 32
 4ac:	bf 2e       	mov	r11, r31
 4ae:	f0 2d       	mov	r31, r0
			} else if(codes[0] == 0x57 && codes[1] == 0x75) { // Button 2 - 0x5775
				song = twinkle;
				songVectIndexer = 0;
				songSize = sizeof(twinkle);
				noteDuration = 0;
				PORTJ.OUT = 0x2;
 4b0:	68 94       	set
 4b2:	44 24       	eor	r4, r4
 4b4:	41 f8       	bld	r4, 1
				songVectIndexer = 0;
				songSize = sizeof(mary);
				noteDuration = 0;
				PORTJ.OUT = 0x1;
			} else if(codes[0] == 0x57 && codes[1] == 0x75) { // Button 2 - 0x5775
				song = twinkle;
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f4 e3       	ldi	r31, 0x34	; 52
 4ba:	cf 2e       	mov	r12, r31
 4bc:	f0 e2       	ldi	r31, 0x20	; 32
 4be:	df 2e       	mov	r13, r31
 4c0:	f0 2d       	mov	r31, r0
			if(codes[0] == 0x55 && codes[1] == 0x77) { // Button 1 - 0x5577
				song = mary;
				songVectIndexer = 0;
				songSize = sizeof(mary);
				noteDuration = 0;
				PORTJ.OUT = 0x1;
 4c2:	55 24       	eor	r5, r5
 4c4:	53 94       	inc	r5
    while (1) 
    {
		if(nextCode == 2) {
			nextCode = 3;
			if(codes[0] == 0x55 && codes[1] == 0x77) { // Button 1 - 0x5577
				song = mary;
 4c6:	74 01       	movw	r14, r8
	char* song = mary;
	uint8_t songSize = sizeof(mary);
	PORTJ.OUT = 0x1;
    while (1) 
    {
		if(nextCode == 2) {
 4c8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <main+0xa4>
 4d0:	56 c0       	rjmp	.+172    	; 0x57e <main+0x150>
			nextCode = 3;
 4d2:	70 92 00 20 	sts	0x2000, r7	; 0x802000 <__data_start>
			if(codes[0] == 0x55 && codes[1] == 0x77) { // Button 1 - 0x5577
 4d6:	88 81       	ld	r24, Y
 4d8:	85 35       	cpi	r24, 0x55	; 85
 4da:	89 f4       	brne	.+34     	; 0x4fe <main+0xd0>
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	87 37       	cpi	r24, 0x77	; 119
 4e0:	71 f4       	brne	.+28     	; 0x4fe <main+0xd0>
				song = mary;
				songVectIndexer = 0;
 4e2:	10 92 8b 23 	sts	0x238B, r1	; 0x80238b <songVectIndexer>
 4e6:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <songVectIndexer+0x1>
				songSize = sizeof(mary);
				noteDuration = 0;
 4ea:	10 92 8a 23 	sts	0x238A, r1	; 0x80238a <noteDuration>
				PORTJ.OUT = 0x1;
 4ee:	f8 01       	movw	r30, r16
 4f0:	54 82       	std	Z+4, r5	; 0x04
		if(nextCode == 2) {
			nextCode = 3;
			if(codes[0] == 0x55 && codes[1] == 0x77) { // Button 1 - 0x5577
				song = mary;
				songVectIndexer = 0;
				songSize = sizeof(mary);
 4f2:	0f 2e       	mov	r0, r31
 4f4:	f3 e8       	ldi	r31, 0x83	; 131
 4f6:	6f 2e       	mov	r6, r31
 4f8:	f0 2d       	mov	r31, r0
    while (1) 
    {
		if(nextCode == 2) {
			nextCode = 3;
			if(codes[0] == 0x55 && codes[1] == 0x77) { // Button 1 - 0x5577
				song = mary;
 4fa:	47 01       	movw	r8, r14
				songVectIndexer = 0;
				songSize = sizeof(mary);
				noteDuration = 0;
				PORTJ.OUT = 0x1;
 4fc:	40 c0       	rjmp	.+128    	; 0x57e <main+0x150>
			} else if(codes[0] == 0x57 && codes[1] == 0x75) { // Button 2 - 0x5775
 4fe:	88 81       	ld	r24, Y
 500:	87 35       	cpi	r24, 0x57	; 87
 502:	89 f4       	brne	.+34     	; 0x526 <main+0xf8>
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	85 37       	cpi	r24, 0x75	; 117
 508:	71 f4       	brne	.+28     	; 0x526 <main+0xf8>
				song = twinkle;
				songVectIndexer = 0;
 50a:	10 92 8b 23 	sts	0x238B, r1	; 0x80238b <songVectIndexer>
 50e:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <songVectIndexer+0x1>
				songSize = sizeof(twinkle);
				noteDuration = 0;
 512:	10 92 8a 23 	sts	0x238A, r1	; 0x80238a <noteDuration>
				PORTJ.OUT = 0x2;
 516:	f8 01       	movw	r30, r16
 518:	44 82       	std	Z+4, r4	; 0x04
				noteDuration = 0;
				PORTJ.OUT = 0x1;
			} else if(codes[0] == 0x57 && codes[1] == 0x75) { // Button 2 - 0x5775
				song = twinkle;
				songVectIndexer = 0;
				songSize = sizeof(twinkle);
 51a:	0f 2e       	mov	r0, r31
 51c:	f5 e5       	ldi	r31, 0x55	; 85
 51e:	6f 2e       	mov	r6, r31
 520:	f0 2d       	mov	r31, r0
				songVectIndexer = 0;
				songSize = sizeof(mary);
				noteDuration = 0;
				PORTJ.OUT = 0x1;
			} else if(codes[0] == 0x57 && codes[1] == 0x75) { // Button 2 - 0x5775
				song = twinkle;
 522:	46 01       	movw	r8, r12
				songVectIndexer = 0;
				songSize = sizeof(twinkle);
				noteDuration = 0;
				PORTJ.OUT = 0x2;
 524:	2c c0       	rjmp	.+88     	; 0x57e <main+0x150>
			} else if(codes[0] == 0xD7 && codes[1] == 0x57) { // Button 3 - 0xD757
 526:	88 81       	ld	r24, Y
 528:	87 3d       	cpi	r24, 0xD7	; 215
 52a:	89 f4       	brne	.+34     	; 0x54e <main+0x120>
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	87 35       	cpi	r24, 0x57	; 87
 530:	71 f4       	brne	.+28     	; 0x54e <main+0x120>
				song = jingle;
				songVectIndexer = 0;
 532:	10 92 8b 23 	sts	0x238B, r1	; 0x80238b <songVectIndexer>
 536:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <songVectIndexer+0x1>
				songSize = sizeof(jingle);
				noteDuration = 0;
 53a:	10 92 8a 23 	sts	0x238A, r1	; 0x80238a <noteDuration>
				PORTJ.OUT = 0x4;
 53e:	f8 01       	movw	r30, r16
 540:	34 82       	std	Z+4, r3	; 0x04
				noteDuration = 0;
				PORTJ.OUT = 0x2;
			} else if(codes[0] == 0xD7 && codes[1] == 0x57) { // Button 3 - 0xD757
				song = jingle;
				songVectIndexer = 0;
				songSize = sizeof(jingle);
 542:	0f 2e       	mov	r0, r31
 544:	fb e7       	ldi	r31, 0x7B	; 123
 546:	6f 2e       	mov	r6, r31
 548:	f0 2d       	mov	r31, r0
				songVectIndexer = 0;
				songSize = sizeof(twinkle);
				noteDuration = 0;
				PORTJ.OUT = 0x2;
			} else if(codes[0] == 0xD7 && codes[1] == 0x57) { // Button 3 - 0xD757
				song = jingle;
 54a:	45 01       	movw	r8, r10
				songVectIndexer = 0;
				songSize = sizeof(jingle);
				noteDuration = 0;
				PORTJ.OUT = 0x4;
 54c:	18 c0       	rjmp	.+48     	; 0x57e <main+0x150>
			} else if(codes[0] == 0x57 && codes[1] == 0xD7) { // Button 4 - 0x57D7
 54e:	88 81       	ld	r24, Y
 550:	87 35       	cpi	r24, 0x57	; 87
 552:	a9 f4       	brne	.+42     	; 0x57e <main+0x150>
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	87 3d       	cpi	r24, 0xD7	; 215
 558:	91 f4       	brne	.+36     	; 0x57e <main+0x150>
				song = bday;
				songVectIndexer = 0;
 55a:	10 92 8b 23 	sts	0x238B, r1	; 0x80238b <songVectIndexer>
 55e:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <songVectIndexer+0x1>
				songSize = sizeof(bday);
				noteDuration = 0;
 562:	10 92 8a 23 	sts	0x238A, r1	; 0x80238a <noteDuration>
				PORTJ.OUT = 0x8;
 566:	f8 01       	movw	r30, r16
 568:	24 82       	std	Z+4, r2	; 0x04
				noteDuration = 0;
				PORTJ.OUT = 0x4;
			} else if(codes[0] == 0x57 && codes[1] == 0xD7) { // Button 4 - 0x57D7
				song = bday;
				songVectIndexer = 0;
				songSize = sizeof(bday);
 56a:	0f 2e       	mov	r0, r31
 56c:	f3 e3       	ldi	r31, 0x33	; 51
 56e:	6f 2e       	mov	r6, r31
 570:	f0 2d       	mov	r31, r0
				songVectIndexer = 0;
				songSize = sizeof(jingle);
				noteDuration = 0;
				PORTJ.OUT = 0x4;
			} else if(codes[0] == 0x57 && codes[1] == 0xD7) { // Button 4 - 0x57D7
				song = bday;
 572:	0f 2e       	mov	r0, r31
 574:	f1 e0       	ldi	r31, 0x01	; 1
 576:	8f 2e       	mov	r8, r31
 578:	f0 e2       	ldi	r31, 0x20	; 32
 57a:	9f 2e       	mov	r9, r31
 57c:	f0 2d       	mov	r31, r0
				noteDuration = 0;
				PORTJ.OUT = 0x8;
			}
		}
		
		if (quarterSecElapsed) {
 57e:	80 91 88 23 	lds	r24, 0x2388	; 0x802388 <__data_end>
 582:	88 23       	and	r24, r24
 584:	09 f4       	brne	.+2      	; 0x588 <main+0x15a>
 586:	a0 cf       	rjmp	.-192    	; 0x4c8 <main+0x9a>
			quarterSecElapsed = 0;
 588:	10 92 88 23 	sts	0x2388, r1	; 0x802388 <__data_end>
			if (!noteDuration) {
 58c:	80 91 8a 23 	lds	r24, 0x238A	; 0x80238a <noteDuration>
 590:	81 11       	cpse	r24, r1
 592:	35 c0       	rjmp	.+106    	; 0x5fe <main+0x1d0>
				note = song[songVectIndexer++];
 594:	80 91 8b 23 	lds	r24, 0x238B	; 0x80238b <songVectIndexer>
 598:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <songVectIndexer+0x1>
 59c:	9c 01       	movw	r18, r24
 59e:	2f 5f       	subi	r18, 0xFF	; 255
 5a0:	3f 4f       	sbci	r19, 0xFF	; 255
 5a2:	20 93 8b 23 	sts	0x238B, r18	; 0x80238b <songVectIndexer>
 5a6:	30 93 8c 23 	sts	0x238C, r19	; 0x80238c <songVectIndexer+0x1>
 5aa:	f4 01       	movw	r30, r8
 5ac:	e8 0f       	add	r30, r24
 5ae:	f9 1f       	adc	r31, r25
 5b0:	80 81       	ld	r24, Z
 5b2:	80 93 89 23 	sts	0x2389, r24	; 0x802389 <note>
				set_note(note);
 5b6:	80 91 89 23 	lds	r24, 0x2389	; 0x802389 <note>
 5ba:	0e 94 c7 01 	call	0x38e	; 0x38e <set_note>
				noteDuration = song[songVectIndexer++] - '0';
 5be:	80 91 8b 23 	lds	r24, 0x238B	; 0x80238b <songVectIndexer>
 5c2:	90 91 8c 23 	lds	r25, 0x238C	; 0x80238c <songVectIndexer+0x1>
 5c6:	9c 01       	movw	r18, r24
 5c8:	2f 5f       	subi	r18, 0xFF	; 255
 5ca:	3f 4f       	sbci	r19, 0xFF	; 255
 5cc:	20 93 8b 23 	sts	0x238B, r18	; 0x80238b <songVectIndexer>
 5d0:	30 93 8c 23 	sts	0x238C, r19	; 0x80238c <songVectIndexer+0x1>
 5d4:	f4 01       	movw	r30, r8
 5d6:	e8 0f       	add	r30, r24
 5d8:	f9 1f       	adc	r31, r25
 5da:	80 81       	ld	r24, Z
 5dc:	80 53       	subi	r24, 0x30	; 48
 5de:	80 93 8a 23 	sts	0x238A, r24	; 0x80238a <noteDuration>
				if(songVectIndexer >= songSize-1) {
 5e2:	20 91 8b 23 	lds	r18, 0x238B	; 0x80238b <songVectIndexer>
 5e6:	30 91 8c 23 	lds	r19, 0x238C	; 0x80238c <songVectIndexer+0x1>
 5ea:	86 2d       	mov	r24, r6
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	28 17       	cp	r18, r24
 5f2:	39 07       	cpc	r19, r25
 5f4:	24 f0       	brlt	.+8      	; 0x5fe <main+0x1d0>
					songVectIndexer = 0;
 5f6:	10 92 8b 23 	sts	0x238B, r1	; 0x80238b <songVectIndexer>
 5fa:	10 92 8c 23 	sts	0x238C, r1	; 0x80238c <songVectIndexer+0x1>
				}
			}
			
			noteDuration--;
 5fe:	80 91 8a 23 	lds	r24, 0x238A	; 0x80238a <noteDuration>
 602:	81 50       	subi	r24, 0x01	; 1
 604:	80 93 8a 23 	sts	0x238A, r24	; 0x80238a <noteDuration>
 608:	5f cf       	rjmp	.-322    	; 0x4c8 <main+0x9a>

0000060a <__vector_58>:
			TCC0.CTRLA = TC_CLKSEL_OFF_gc;
		}
	}
}

ISR(USARTE0_RXC_vect) {
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	08 b6       	in	r0, 0x38	; 56
 616:	0f 92       	push	r0
 618:	18 be       	out	0x38, r1	; 56
 61a:	09 b6       	in	r0, 0x39	; 57
 61c:	0f 92       	push	r0
 61e:	19 be       	out	0x39, r1	; 57
 620:	0b b6       	in	r0, 0x3b	; 59
 622:	0f 92       	push	r0
 624:	1b be       	out	0x3b, r1	; 59
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
	char newChar = USARTE0_in_char();
 63e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <USARTE0_in_char>
	if(newChar == 0xD5) {
 642:	85 3d       	cpi	r24, 0xD5	; 213
 644:	19 f4       	brne	.+6      	; 0x64c <__vector_58+0x42>
		nextCode = 0;
 646:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
 64a:	0e c0       	rjmp	.+28     	; 0x668 <__vector_58+0x5e>
	} else if (nextCode < 2) {
 64c:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__data_start>
 650:	92 30       	cpi	r25, 0x02	; 2
 652:	50 f4       	brcc	.+20     	; 0x668 <__vector_58+0x5e>
		codes[nextCode++] = newChar;
 654:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__data_start>
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	9e 0f       	add	r25, r30
 65c:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__data_start>
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	e3 57       	subi	r30, 0x73	; 115
 664:	fc 4d       	sbci	r31, 0xDC	; 220
 666:	80 83       	st	Z, r24
	}
}
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	0f 90       	pop	r0
 682:	0b be       	out	0x3b, r0	; 59
 684:	0f 90       	pop	r0
 686:	09 be       	out	0x39, r0	; 57
 688:	0f 90       	pop	r0
 68a:	08 be       	out	0x38, r0	; 56
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <tcc0_init>:
 696:	e0 e0       	ldi	r30, 0x00	; 0
 698:	f8 e0       	ldi	r31, 0x08	; 8
 69a:	87 e4       	ldi	r24, 0x47	; 71
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	86 a3       	std	Z+38, r24	; 0x26
 6a0:	97 a3       	std	Z+39, r25	; 0x27
 6a2:	80 ec       	ldi	r24, 0xC0	; 192
 6a4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 83       	st	Z, r24
 6ac:	10 a2       	std	Z+32, r1	; 0x20
 6ae:	11 a2       	std	Z+33, r1	; 0x21
 6b0:	08 95       	ret

000006b2 <tcc1_enable>:
 6b2:	e0 e4       	ldi	r30, 0x40	; 64
 6b4:	f8 e0       	ldi	r31, 0x08	; 8
 6b6:	10 a2       	std	Z+32, r1	; 0x20
 6b8:	11 a2       	std	Z+33, r1	; 0x21
 6ba:	87 e0       	ldi	r24, 0x07	; 7
 6bc:	80 83       	st	Z, r24
 6be:	08 95       	ret

000006c0 <tcc1_init>:
 6c0:	e0 e4       	ldi	r30, 0x40	; 64
 6c2:	f8 e0       	ldi	r31, 0x08	; 8
 6c4:	80 e4       	ldi	r24, 0x40	; 64
 6c6:	9f e1       	ldi	r25, 0x1F	; 31
 6c8:	86 a3       	std	Z+38, r24	; 0x26
 6ca:	97 a3       	std	Z+39, r25	; 0x27
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	86 83       	std	Z+6, r24	; 0x06
 6d0:	10 a2       	std	Z+32, r1	; 0x20
 6d2:	11 a2       	std	Z+33, r1	; 0x21
 6d4:	08 95       	ret

000006d6 <USARTE0_init>:
 6d6:	24 e0       	ldi	r18, 0x04	; 4
 6d8:	20 93 82 06 	sts	0x0682, r18	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
 6dc:	e0 ea       	ldi	r30, 0xA0	; 160
 6de:	fa e0       	ldi	r31, 0x0A	; 10
 6e0:	86 83       	std	Z+6, r24	; 0x06
 6e2:	62 95       	swap	r22
 6e4:	60 7f       	andi	r22, 0xF0	; 240
 6e6:	96 2b       	or	r25, r22
 6e8:	97 83       	std	Z+7, r25	; 0x07
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	85 83       	std	Z+5, r24	; 0x05
 6ee:	88 e1       	ldi	r24, 0x18	; 24
 6f0:	84 83       	std	Z+4, r24	; 0x04
 6f2:	08 95       	ret

000006f4 <USARTE0_in_char>:
 6f4:	e0 ea       	ldi	r30, 0xA0	; 160
 6f6:	fa e0       	ldi	r31, 0x0A	; 10
 6f8:	81 81       	ldd	r24, Z+1	; 0x01
 6fa:	88 23       	and	r24, r24
 6fc:	ec f7       	brge	.-6      	; 0x6f8 <USARTE0_in_char+0x4>
 6fe:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
 702:	08 95       	ret

00000704 <USARTE0_enable_interrupts>:
 704:	98 2f       	mov	r25, r24
 706:	9f 7d       	andi	r25, 0xDF	; 223
 708:	92 35       	cpi	r25, 0x52	; 82
 70a:	c9 f4       	brne	.+50     	; 0x73e <USARTE0_enable_interrupts+0x3a>
 70c:	6f 7d       	andi	r22, 0xDF	; 223
 70e:	6c 34       	cpi	r22, 0x4C	; 76
 710:	31 f4       	brne	.+12     	; 0x71e <USARTE0_enable_interrupts+0x1a>
 712:	e0 ea       	ldi	r30, 0xA0	; 160
 714:	fa e0       	ldi	r31, 0x0A	; 10
 716:	83 81       	ldd	r24, Z+3	; 0x03
 718:	80 61       	ori	r24, 0x10	; 16
 71a:	83 83       	std	Z+3, r24	; 0x03
 71c:	08 95       	ret
 71e:	6d 34       	cpi	r22, 0x4D	; 77
 720:	31 f4       	brne	.+12     	; 0x72e <USARTE0_enable_interrupts+0x2a>
 722:	e0 ea       	ldi	r30, 0xA0	; 160
 724:	fa e0       	ldi	r31, 0x0A	; 10
 726:	83 81       	ldd	r24, Z+3	; 0x03
 728:	80 62       	ori	r24, 0x20	; 32
 72a:	83 83       	std	Z+3, r24	; 0x03
 72c:	08 95       	ret
 72e:	68 34       	cpi	r22, 0x48	; 72
 730:	01 f5       	brne	.+64     	; 0x772 <USARTE0_enable_interrupts+0x6e>
 732:	e0 ea       	ldi	r30, 0xA0	; 160
 734:	fa e0       	ldi	r31, 0x0A	; 10
 736:	83 81       	ldd	r24, Z+3	; 0x03
 738:	80 63       	ori	r24, 0x30	; 48
 73a:	83 83       	std	Z+3, r24	; 0x03
 73c:	08 95       	ret
 73e:	84 37       	cpi	r24, 0x74	; 116
 740:	c1 f4       	brne	.+48     	; 0x772 <USARTE0_enable_interrupts+0x6e>
 742:	6f 7d       	andi	r22, 0xDF	; 223
 744:	6c 34       	cpi	r22, 0x4C	; 76
 746:	31 f4       	brne	.+12     	; 0x754 <USARTE0_enable_interrupts+0x50>
 748:	e0 ea       	ldi	r30, 0xA0	; 160
 74a:	fa e0       	ldi	r31, 0x0A	; 10
 74c:	83 81       	ldd	r24, Z+3	; 0x03
 74e:	81 60       	ori	r24, 0x01	; 1
 750:	83 83       	std	Z+3, r24	; 0x03
 752:	08 95       	ret
 754:	6d 34       	cpi	r22, 0x4D	; 77
 756:	31 f4       	brne	.+12     	; 0x764 <USARTE0_enable_interrupts+0x60>
 758:	e0 ea       	ldi	r30, 0xA0	; 160
 75a:	fa e0       	ldi	r31, 0x0A	; 10
 75c:	83 81       	ldd	r24, Z+3	; 0x03
 75e:	82 60       	ori	r24, 0x02	; 2
 760:	83 83       	std	Z+3, r24	; 0x03
 762:	08 95       	ret
 764:	68 34       	cpi	r22, 0x48	; 72
 766:	29 f4       	brne	.+10     	; 0x772 <USARTE0_enable_interrupts+0x6e>
 768:	e0 ea       	ldi	r30, 0xA0	; 160
 76a:	fa e0       	ldi	r31, 0x0A	; 10
 76c:	83 81       	ldd	r24, Z+3	; 0x03
 76e:	83 60       	ori	r24, 0x03	; 3
 770:	83 83       	std	Z+3, r24	; 0x03
 772:	08 95       	ret

00000774 <__tablejump2__>:
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	88 1f       	adc	r24, r24
 77a:	8b bf       	out	0x3b, r24	; 59
 77c:	07 90       	elpm	r0, Z+
 77e:	f6 91       	elpm	r31, Z
 780:	e0 2d       	mov	r30, r0
 782:	1b be       	out	0x3b, r1	; 59
 784:	19 94       	eijmp

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
